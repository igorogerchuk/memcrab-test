{"version":3,"sources":["components/AvarageRow/AvarageRow.module.css","components/Array/Array.module.css","redux/types.js","services/randomArray.js","components/Inputs.jsx","redux/actions.js","services/closestNumbers.js","redux/selectors.js","components/ArrayLine.jsx","services/avarageRow.js","components/AvarageRow/AvarageRow.jsx","components/Array/Array.jsx","components/AddLineButton.jsx","components/App.jsx","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","types","REMOVE_LINE","ADD_LINE","SAVE_ARRAY","INCREASE","SAVE_PARAMS","ILLUMINATE","uuidv4","require","createRandomArray","lines","columns","array","i","id","cells","j","amount","Math","floor","random","illuminated","Inputs","state","m","n","x","inputHandler","e","target","value","setState","submitHandler","preventDefault","props","onSaveArray","onSaveParams","alert","this","onSubmit","type","name","onChange","placeholder","Component","connect","dispatch","payload","actions","params","getClosestNumbers","numbersQty","origin","inlineArray","forEach","line","element","push","sort","a","b","abs","slice","getArray","getColumnsQty","getNumbersQty","TdSum","styled","td","Td","bgColor","ArrayLine","increaseHandler","onIncrease","illuminateHandler","numberQty","onIlluminate","onRemove","map","onClick","onMouseOver","onMouseOut","key","reduce","sum","selectors","ownProps","elements","getAvarageRow","avarageRow","columnQty","length","columnTotal","toFixed","AvarageRow","className","styles","avarage","Array","matrix","AddLineButton","addHandler","lineLength","onAdd","newLine","App","action","el","reducer","combineReducers","undefined","filter","l","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76df7806.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avarage\":\"AvarageRow_avarage__2TjEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"Array_matrix__1r8Hw\"};","const types = {\r\n  REMOVE_LINE: \"REMOVE_LINE\",\r\n  ADD_LINE: \"ADD_LINE\",\r\n  SAVE_ARRAY: \"SAVE_ARRAY\",\r\n  INCREASE: \"INCREASE\",\r\n  SAVE_PARAMS: \"SAVE_PARAMS\",\r\n  ILLUMINATE: \"ILLUMINATE\"\r\n};\r\n\r\nexport default types;\r\n","const uuidv4 = require(\"uuid/v4\");\r\n\r\nconst createRandomArray = (lines, columns) => {\r\n  const array = [];\r\n  for (let i = 0; i < lines; i++) {\r\n    array[i] = { id: uuidv4(), cells: [] };\r\n    for (let j = 0; j < columns; j++) {\r\n      array[i].cells[j] = {\r\n        id: uuidv4(),\r\n        amount: Math.floor(Math.random() * 1000),\r\n        illuminated: false\r\n      };\r\n    }\r\n  }\r\n  return array;\r\n};\r\n\r\nexport default createRandomArray;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport createRandomArray from \"../services/randomArray\";\r\n\r\nclass Inputs extends Component {\r\n  state = { m: \"\", n: \"\", x: \"\" };\r\n\r\n  inputHandler = e => {\r\n    const { id, value } = e.target;\r\n    switch (id) {\r\n      case \"m\":\r\n        this.setState(state => ({ ...state, m: value }));\r\n        break;\r\n      case \"n\":\r\n        this.setState(state => ({ ...state, n: value }));\r\n        break;\r\n      case \"x\":\r\n        this.setState(state => ({ ...state, x: value }));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  submitHandler = e => {\r\n    e.preventDefault();\r\n    const { m, n, x } = this.state;\r\n    const { onSaveArray, onSaveParams } = this.props;\r\n    if (m <= 0 || n <= 0 || x < 0) {\r\n      alert(\"array parameters must be more then 0\");\r\n      return;\r\n    }\r\n    onSaveArray(createRandomArray(m, n));\r\n    onSaveParams({ n, x });\r\n\r\n    this.setState({ m: \"\", n: \"\", x: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { m, n, x } = this.state;\r\n    return (\r\n      <div>\r\n        <p>Enter table parameters</p>\r\n        <form onSubmit={this.submitHandler}>\r\n          <label>\r\n            Lines quantity:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              name=\"lines\"\r\n              id=\"m\"\r\n              onChange={this.inputHandler}\r\n              value={m}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Columns quantity:\r\n            <input\r\n              type=\"number\"\r\n              name=\"columns\"\r\n              id=\"n\"\r\n              onChange={this.inputHandler}\r\n              value={n}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Illuminated cells quantity:\r\n            <input\r\n              type=\"number\"\r\n              name=\"illuminate\"\r\n              id=\"x\"\r\n              onChange={this.inputHandler}\r\n              value={x}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <input type=\"submit\" value=\"Generate\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSaveArray: array => dispatch(actions.saveArray(array)),\r\n    onSaveParams: params => dispatch(actions.saveParams(params))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Inputs);\r\n","import types from \"./types\";\r\n\r\nexport const removeLine = id => {\r\n  return {\r\n    type: types.REMOVE_LINE,\r\n    payload: { id }\r\n  };\r\n};\r\n\r\nexport const addLine = newLine => {\r\n  return {\r\n    type: types.ADD_LINE,\r\n    payload: { newLine }\r\n  };\r\n};\r\n\r\nexport const saveArray = array => {\r\n  return {\r\n    type: types.SAVE_ARRAY,\r\n    payload: { array }\r\n  };\r\n};\r\n\r\nexport const increase = id => {\r\n  return {\r\n    type: types.INCREASE,\r\n    payload: { id }\r\n  };\r\n};\r\n\r\nexport const saveParams = params => {\r\n  return {\r\n    type: types.SAVE_PARAMS,\r\n    payload: { params }\r\n  };\r\n};\r\n\r\nexport const illuminateElements = elements => {\r\n  return {\r\n    type: types.ILLUMINATE,\r\n    payload: { elements }\r\n  };\r\n};\r\n","const getClosestNumbers = (array, id, numbersQty) => {\r\n  let origin;\r\n  const inlineArray = [];\r\n  array.forEach(line =>\r\n    line.cells.forEach(element => {\r\n      if (element.id === id) {\r\n        origin = element;\r\n      } else {\r\n        inlineArray.push(element);\r\n      }\r\n    })\r\n  );\r\n  inlineArray.sort(\r\n    (a, b) =>\r\n      Math.abs(a.amount - origin.amount) - Math.abs(b.amount - origin.amount)\r\n  );\r\n  return [origin, ...inlineArray.slice(0, numbersQty)];\r\n};\r\n\r\nexport default getClosestNumbers;\r\n","export const getArray = state => state.array;\r\n\r\nexport const getColumnsQty = state => state.params.n;\r\n\r\nexport const getNumbersQty = state => state.params.x;\r\n\r\nexport const getIlluminated = state => state.Illuminated;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport styled from \"styled-components\";\r\nimport getClosestNumbers from \"../services/closestNumbers\";\r\nimport * as selectors from \"../redux/selectors\";\r\n\r\nconst TdSum = styled.td`\r\n  background-color: cadetblue;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  cursor: pointer;\r\n  background-color: ${props => props.bgColor};\r\n`;\r\n\r\nclass ArrayLine extends Component {\r\n  increaseHandler = e => {\r\n    const { onIncrease } = this.props;\r\n    onIncrease(e.target.id);\r\n  };\r\n\r\n  illuminateHandler = e => {\r\n    const { array, numberQty, onIlluminate } = this.props;\r\n    onIlluminate(getClosestNumbers(array, e.target.id, numberQty));\r\n  };\r\n\r\n  render() {\r\n    const { line, onRemove } = this.props;\r\n    return (\r\n      <tr>\r\n        {line.map(element => (\r\n          <Td\r\n            onClick={this.increaseHandler}\r\n            onMouseOver={this.illuminateHandler}\r\n            onMouseOut={this.illuminateHandler}\r\n            key={element.id}\r\n            id={element.id}\r\n            bgColor={element.illuminated ? \"green\" : \"white\"}\r\n          >\r\n            {element.amount}\r\n          </Td>\r\n        ))}\r\n        <TdSum>\r\n          {line.reduce((sum, element) => (sum += element.amount), 0)}\r\n        </TdSum>\r\n        <td>\r\n          <button onClick={onRemove}>Remove</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    array: selectors.getArray(state),\r\n    numberQty: selectors.getNumbersQty(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onRemove: () => dispatch(actions.removeLine(ownProps.id)),\r\n    onIncrease: id => dispatch(actions.increase(id)),\r\n    onIlluminate: elements => dispatch(actions.illuminateElements(elements))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArrayLine);\r\n","const getAvarageRow = array => {\r\n  const avarageRow = [];\r\n  const columnQty = array[0].cells.length;\r\n  for (let j = 0; j < columnQty; j++) {\r\n    let columnTotal = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n      columnTotal += array[i].cells[j].amount;\r\n    }\r\n    avarageRow.push((columnTotal / columnQty).toFixed(2));\r\n  }\r\n  return avarageRow;\r\n};\r\n\r\nexport default getAvarageRow;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport getAvarageRow from \"../../services/avarageRow\";\r\nimport styles from \"./AvarageRow.module.css\";\r\nimport * as selectors from \"../../redux/selectors\";\r\n\r\nclass AvarageRow extends Component {\r\n  render() {\r\n    const { array } = this.props;\r\n    return (\r\n      <tr className={styles.avarage}>\r\n        {getAvarageRow(array).map(element => {\r\n          return <td key={element}>{element}</td>;\r\n        })}\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { array: selectors.getArray(state) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AvarageRow);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ArrayLine from \"../ArrayLine\";\r\nimport AvarageRow from \"../AvarageRow\";\r\nimport styles from \"./Array.module.css\";\r\nimport * as selectors from \"../../redux/selectors\";\r\n\r\nclass Array extends Component {\r\n  render() {\r\n    const { array } = this.props;\r\n    return (\r\n      <div>\r\n        <table className={styles.matrix}>\r\n          <tbody>\r\n            {array.map(line => {\r\n              return <ArrayLine key={line.id} id={line.id} line={line.cells} />;\r\n            })}\r\n            <AvarageRow />\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { array: selectors.getArray(state) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Array);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport * as selectors from \"../redux/selectors\";\r\nimport createRandomArray from \"../services/randomArray\";\r\n\r\nclass AddLineButton extends Component {\r\n  addHandler = () => {\r\n    const { lineLength, onAdd } = this.props;\r\n    onAdd(createRandomArray(1, lineLength));\r\n  };\r\n\r\n  render() {\r\n    return <button onClick={this.addHandler}>Add Line</button>;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAdd: newLine => dispatch(actions.addLine(newLine))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    lineLength: selectors.getColumnsQty(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddLineButton);\r\n","import React, { Component } from \"react\";\nimport Inputs from \"./Inputs\";\nimport Array from \"./Array\";\nimport AddLineButton from \"./AddLineButton\";\nimport { connect } from \"react-redux\";\nimport * as selectors from \"../redux/selectors\";\n\nclass App extends Component {\n  render() {\n    const { array } = this.props;\n    return (\n      <>\n        <Inputs />\n        {array.length > 0 && <Array />}\n        {array.length > 0 && <AddLineButton />}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { array: selectors.getArray(state) };\n};\n\nexport default connect(mapStateToProps)(App);\n","import types from \"./types\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst element = (state, { type, payload }) => {\r\n  switch (type) {\r\n    case types.INCREASE:\r\n      return state.id === payload.id\r\n        ? { ...state, amount: (state.amount += 1) }\r\n        : state;\r\n    case types.ILLUMINATE:\r\n      for (const el of payload.elements) {\r\n        if (state === el) {\r\n          return { ...state, illuminated: !state.illuminated };\r\n        }\r\n      }\r\n      return state;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst line = (state, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_LINE:\r\n      return action.payload.newLine;\r\n    case types.REMOVE_LINE:\r\n      return state.id !== action.payload.id;\r\n    case types.INCREASE:\r\n      return state.map(el => element(el, action));\r\n    case types.ILLUMINATE:\r\n      return state.map(el => element(el, action));\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst arrayReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case types.ADD_LINE:\r\n      return [...state, ...line(undefined, action)];\r\n    case types.REMOVE_LINE:\r\n      return state.filter(l => line(l, action));\r\n    case types.SAVE_ARRAY:\r\n      return action.payload.array;\r\n    case types.INCREASE:\r\n      return state.map(l => {\r\n        return { ...l, cells: line(l.cells, action) };\r\n      });\r\n    case types.ILLUMINATE:\r\n      return state.map(l => {\r\n        return { ...l, cells: line(l.cells, action) };\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst paramsReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case types.SAVE_PARAMS:\r\n      return action.payload.params;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst reducer = combineReducers({\r\n  array: arrayReducer,\r\n  params: paramsReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}