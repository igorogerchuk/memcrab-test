{"version":3,"sources":["components/Inputs/Inputs.module.css","components/ArrayCell/ArrayCell.module.css","components/SumCell/SumCell.module.css","components/ArrayRow/ArrayRow.module.css","components/AverageCell/AverageCell.module.css","components/Array/Array.module.css","components/App/App.module.css","services/randomArray.js","components/Inputs/Inputs.jsx","redux/actions.js","redux/types.js","components/ArrayCell/ArrayCell.jsx","components/SumCell/SumCell.jsx","components/ArrayRow/ArrayRow.jsx","redux/selectors.js","components/AverageCell/AverageCell.jsx","components/AverageRow/AverageRow.jsx","services/closestNumbers.js","components/Array/Array.jsx","components/App/App.jsx","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","uuidv4","require","createRandomArray","rowsQty","columnsQty","array","Array","from","length","cellsIds","rows","reduce","acc","rowId","index","slice","cells","cellId","id","amount","randomThreeDigitNumber","console","log","Math","floor","random","Inputs","dispatch","useDispatch","useState","m","n","x","params","setParams","inputHandler","e","target","value","onSubmit","preventDefault","illuminatedQty","alert","batch","type","payload","actions","htmlFor","name","onChange","placeholder","React","memo","cell","onHover","offHover","illuminated","onIncrease","sumHover","sum","style","background","percents","toFixed","onClick","onMouseEnter","onMouseLeave","nextProps","row","sumCell","onRemove","setSumHover","map","key","getRows","state","getCells","getColumnsQty","getIlluminatedQty","getSumColumn","createSelector","Object","keys","getAverageRow","fill","averageCell","AverageRow","averageRow","useSelector","selectors","getClosestNumbers","pointId","cellsWithoutPoint","cellsArray","pointCell","sort","a","b","abs","closestNumbersIds","columnQty","sumColumn","setIlluminated","hoverOnHandler","currentTarget","closestNumbers","hoverOffHandler","increaseHandler","removeHandler","colSpan","App","reducer","combineReducers","action","filter","withoutDeleted","includes","defaultState","root","document","getElementById","store","initialState","createStore","configureStore","window","__REDUX_STATE__","ReactDOM","hydrate"],"mappings":"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","file":"static/js/main.ed075d93.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"formWrapper___Xr_Ln\",\"form\":\"form___1t6C-\",\"formTitle\":\"formTitle___1Sczm\",\"inputWrapper\":\"inputWrapper___1nGv5\",\"label\":\"label___2sD9G\",\"input\":\"input___3WuZL\",\"submitButton\":\"submitButton___1e-tC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simpleTd\":\"simpleTd___1ELya\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sumCell\":\"sumCell___2yW_R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"removeButton\":\"removeButton___2Sb5_ addButton___2a67D\",\"removeButtonTd\":\"removeButtonTd___1OWGN addCell___a54He\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"averageTd\":\"averageTd___FDFfU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableWrapper\":\"tableWrapper___3mKZT\",\"table\":\"table___3XwP7\",\"addCell\":\"addCell___a54He\",\"addButton\":\"addButton___2a67D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container___2qaOc\"};","// @flow\r\nconst uuidv4 = require(\"uuid/v4\");\r\n\r\nconst createRandomArray = (rowsQty: number, columnsQty: number) => {\r\n  const array: Array<string> = Array.from({ length: rowsQty }, () => uuidv4());\r\n\r\n  const cellsIds: Array<string> = Array.from(\r\n    { length: rowsQty * columnsQty },\r\n    () => uuidv4()\r\n  );\r\n\r\n  const rows: { [key: string]: Array<string> } = array.reduce(\r\n    (acc, rowId, index) => {\r\n      acc[rowId] = cellsIds.slice(\r\n        index * columnsQty,\r\n        index * columnsQty + columnsQty\r\n      );\r\n      return acc;\r\n    },\r\n    {}\r\n  );\r\n  const cells: {\r\n    [key: string]: { id: string, amount: number },\r\n  } = cellsIds.reduce(\r\n    (acc, cellId) => (\r\n      (acc[cellId] = { id: cellId, amount: randomThreeDigitNumber() }), acc\r\n    ),\r\n    {}\r\n  );\r\n  console.log(rows);\r\n  return { array, rows, cells };\r\n};\r\nexport default createRandomArray;\r\n\r\nconst randomThreeDigitNumber = () => Math.floor(Math.random() * 1000);\r\n","// @flow\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch, batch } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport type { Action } from \"../../redux/actions\";\r\nimport type { Dispatch } from \"redux\";\r\nimport createRandomArray from \"../../services/randomArray\";\r\nimport \"./Inputs.module.css\";\r\n\r\nconst Inputs = () => {\r\n  const dispatch = useDispatch<Dispatch<Action>>();\r\n  const [params, setParams] = useState({ m: \"\", n: \"\", x: \"\" });\r\n  const { m, n, x } = params;\r\n\r\n  const inputHandler = (e: SyntheticInputEvent<HTMLInputElement>) => {\r\n    const { id, value } = e.target;\r\n    setParams({ ...params, [id]: value });\r\n  };\r\n\r\n  const submitHandler = (e: SyntheticInputEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    const rowsQty = +m;\r\n    const columnsQty = +n;\r\n    const illuminatedQty = +x;\r\n    if (rowsQty <= 0 || columnsQty <= 0 || illuminatedQty < 0) {\r\n      alert(\"array parameters must be more then 0\");\r\n      return;\r\n    }\r\n    batch(() => {\r\n      dispatch(actions.saveParams({ n: columnsQty, x: illuminatedQty }));\r\n\r\n      const { array, rows, cells } = createRandomArray(rowsQty, columnsQty);\r\n      dispatch(actions.saveArray(array));\r\n      dispatch(actions.saveRows(rows));\r\n      dispatch(actions.saveCells(cells));\r\n    });\r\n    setParams({ m: \"\", n: \"\", x: \"\" });\r\n  };\r\n\r\n  return (\r\n    <div styleName=\"formWrapper\">\r\n      <h1 styleName=\"formTitle\">Enter table parameters</h1>\r\n      <form styleName=\"form\" onSubmit={submitHandler} id=\"form\">\r\n        <div styleName=\"inputWrapper\">\r\n          <label htmlFor=\"m\" styleName=\"label\">\r\n            Rows quantity:\r\n          </label>\r\n          <input\r\n            styleName=\"input\"\r\n            type=\"number\"\r\n            name=\"rows\"\r\n            id=\"m\"\r\n            onChange={inputHandler}\r\n            value={m}\r\n            placeholder=\"0\"\r\n          />\r\n        </div>\r\n        <div styleName=\"inputWrapper\">\r\n          <label htmlFor=\"n\" styleName=\"label\">\r\n            Columns quantity:\r\n          </label>\r\n          <input\r\n            styleName=\"input\"\r\n            type=\"number\"\r\n            name=\"columns\"\r\n            id=\"n\"\r\n            onChange={inputHandler}\r\n            value={n}\r\n            placeholder=\"0\"\r\n          />\r\n        </div>\r\n        <div styleName=\"inputWrapper\">\r\n          <label htmlFor=\"m\" styleName=\"label\">\r\n            Illuminated cells quantity:\r\n          </label>\r\n          <input\r\n            styleName=\"input\"\r\n            type=\"number\"\r\n            name=\"illuminate\"\r\n            id=\"x\"\r\n            onChange={inputHandler}\r\n            value={x}\r\n            placeholder=\"0\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <input styleName=\"submitButton\" type=\"submit\" value=\"Generate\" />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inputs;\r\n","// @flow\r\nimport * as types from \"./types\";\r\nimport type { ArrayState, RowsState, CellsState, ParamsState } from \"./types\";\r\n\r\ntype _ExtractReturn<R, F: (...args: any[]) => R> = R;\r\ntype ExtractReturn<F> = _ExtractReturn<*, F>;\r\n\r\nexport const removeRow = (id: string, cellsIds: $ReadOnlyArray<string>) => ({\r\n  type: types.REMOVE_ROW,\r\n  payload: { id, cellsIds },\r\n});\r\n\r\nexport const addRow = (\r\n  array: ArrayState,\r\n  row: RowsState,\r\n  cells: CellsState\r\n) => ({\r\n  type: types.ADD_ROW,\r\n  payload: { array, row, cells },\r\n});\r\n\r\nexport const saveArray = (array: ArrayState) => ({\r\n  type: types.SAVE_ARRAY,\r\n  payload: { array },\r\n});\r\n\r\nexport const saveRows = (rows: RowsState) => ({\r\n  type: types.SAVE_ROWS,\r\n  payload: { rows },\r\n});\r\n\r\nexport const saveCells = (cells: CellsState) => ({\r\n  type: types.SAVE_CELLS,\r\n  payload: { cells },\r\n});\r\n\r\nexport const increase = (id: string) => ({\r\n  type: types.INCREASE,\r\n  payload: { id },\r\n});\r\n\r\nexport const saveParams = (params: ParamsState) => ({\r\n  type: types.SAVE_PARAMS,\r\n  payload: { params },\r\n});\r\nexport type Action =\r\n  | ExtractReturn<typeof removeRow>\r\n  | ExtractReturn<typeof addRow>\r\n  | ExtractReturn<typeof saveArray>\r\n  | ExtractReturn<typeof saveRows>\r\n  | ExtractReturn<typeof saveCells>\r\n  | ExtractReturn<typeof saveParams>\r\n  | ExtractReturn<typeof increase>;\r\n","// @flow\r\nexport const SAVE_PARAMS = \"SAVE_PARAMS\";\r\nexport const SAVE_ARRAY = \"SAVE_ARRAY\";\r\nexport const SAVE_ROWS = \"SAVE_ROWS\";\r\nexport const SAVE_CELLS = \"SAVE_CELLS\";\r\nexport const REMOVE_ROW = \"REMOVE_ROW\";\r\nexport const ADD_ROW = \"ADD_ROW\";\r\nexport const INCREASE = \"INCREASE\";\r\nexport type ArrayState = $ReadOnlyArray<string>;\r\nexport type RowsState = $ReadOnly<{\r\n  [key: string]: $ReadOnlyArray<string>,\r\n}>;\r\nexport type CellsState = $ReadOnly<{\r\n  [key: string]: $ReadOnly<{ id: string, amount: number }>,\r\n}>;\r\nexport type ParamsState = $ReadOnly<{ n: number, x: number }>;\r\nexport type State = {\r\n  array: ArrayState,\r\n  rows: RowsState,\r\n  cells: CellsState,\r\n  params: ParamsState,\r\n};\r\n","// @flow\r\nimport React from \"react\";\r\nimport \"./ArrayCell.module.css\";\r\n\r\ntype ownProps = {|\r\n  cell: $ReadOnly<{ amount: number, id: string }>,\r\n  id: string,\r\n  onHover: (e: SyntheticEvent<HTMLTableCellElement>) => void,\r\n  offHover: () => void,\r\n  illuminated: { [id: string]: boolean },\r\n  onIncrease: (e: SyntheticEvent<HTMLTableCellElement>) => void,\r\n  sumHover: boolean,\r\n  sum: number,\r\n|};\r\n\r\nconst areEqual = ({ illuminated, id, cell, sumHover }, nextProps) => {\r\n  if (nextProps.illuminated[id] !== illuminated[id]) {\r\n    return false;\r\n  }\r\n\r\n  if (nextProps.cell.amount !== cell.amount) {\r\n    return false;\r\n  }\r\n\r\n  if (nextProps.sumHover !== sumHover) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst ArrayCell = ({\r\n  cell,\r\n  id,\r\n  onHover,\r\n  offHover,\r\n  illuminated,\r\n  onIncrease,\r\n  sumHover,\r\n  sum,\r\n}: ownProps) => {\r\n  let style = {\r\n    background:\r\n      \"linear-gradient(110deg,#eee 0%,#e3e3e3 10%,#fff 20%,#fff 25%,#f0f0f0 26%,#fff 28%,#ddd 55%,#eee 100%)\",\r\n  };\r\n  let value = cell.amount;\r\n\r\n  if (illuminated[id]) {\r\n    style.background =\r\n      \"linear-gradient(110deg, #f90c04 0%, #ed413b 10%, #fff 20%, #fff 25%, #f0f0f0 26%, #fff 28%, #f53d37 55%, #f90c04 100%)\";\r\n  }\r\n\r\n  if (sumHover) {\r\n    const percents = (cell.amount / sum) * 100;\r\n    style.background = `linear-gradient(to top, #fff200, #1e9600 ${percents}%, transparent ${percents}%)`;\r\n    value = percents.toFixed(1) + \"%\";\r\n  }\r\n\r\n  return (\r\n    <td\r\n      styleName=\"simpleTd\"\r\n      onClick={onIncrease}\r\n      id={id}\r\n      onMouseEnter={onHover}\r\n      onMouseLeave={offHover}\r\n      style={style}\r\n    >\r\n      {value}\r\n    </td>\r\n  );\r\n};\r\nexport default React.memo<ownProps>(ArrayCell, areEqual);\r\n","// @flow\r\nimport React from \"react\";\r\nimport \"./SumCell.module.css\";\r\n\r\ntype ownProps = {|\r\n  onHover: (e: SyntheticEvent<HTMLTableCellElement>) => void,\r\n  sum: number,\r\n|};\r\n\r\nconst areEqual = ({ sum }, nextProps) => {\r\n  if (nextProps.sum !== sum) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst SumCell = ({ sum, onHover }: ownProps) => (\r\n  <td onMouseEnter={onHover} onMouseLeave={onHover} styleName=\"sumCell\">\r\n    {sum}\r\n  </td>\r\n);\r\nexport default React.memo<ownProps>(SumCell, areEqual);\r\n","// @flow\r\nimport React, { useState } from \"react\";\r\nimport ArrayCell from \"../ArrayCell\";\r\nimport SumCell from \"../SumCell\";\r\nimport \"./ArrayRow.module.css\";\r\nimport type { CellsState } from \"../../redux/types\";\r\n\r\ntype ownProps = {|\r\n  row: $ReadOnlyArray<string>,\r\n  id: string,\r\n  onHover: (e: SyntheticEvent<HTMLTableCellElement>) => void,\r\n  offHover: () => void,\r\n  illuminated: { [id: string]: boolean },\r\n  cells: CellsState,\r\n  onIncrease: (e: SyntheticEvent<HTMLTableCellElement>) => void,\r\n  sumCell: number,\r\n  onRemove: (e: SyntheticEvent<HTMLButtonElement>) => void,\r\n|};\r\n\r\nconst areEqual = ({ illuminated, row, cells }, nextProps) => {\r\n  for (let cellId of row) {\r\n    if (nextProps.illuminated[cellId] !== illuminated[cellId]) {\r\n      return false;\r\n    }\r\n    if (nextProps.cells[cellId].amount !== cells[cellId].amount) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst ArrayRow = ({\r\n  row,\r\n  id,\r\n  onHover,\r\n  offHover,\r\n  illuminated,\r\n  cells,\r\n  onIncrease,\r\n  sumCell,\r\n  onRemove,\r\n}: ownProps) => {\r\n  const [sumHover, setSumHover] = useState(false);\r\n\r\n  const hoverHandler = () => setSumHover((sumHover) => !sumHover);\r\n\r\n  return (\r\n    <tr id={id}>\r\n      {row.map((cellId) => (\r\n        <ArrayCell\r\n          sumHover={sumHover}\r\n          sum={sumCell}\r\n          key={cellId}\r\n          id={cellId}\r\n          onHover={onHover}\r\n          offHover={offHover}\r\n          illuminated={illuminated}\r\n          cell={cells[cellId]}\r\n          onIncrease={onIncrease}\r\n        />\r\n      ))}\r\n      <SumCell onHover={hoverHandler} sum={sumCell} />\r\n      <td styleName=\"removeButtonTd\">\r\n        <button styleName=\"removeButton\" onClick={onRemove} id={id}>\r\n          &times;\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\nexport default React.memo<ownProps>(ArrayRow, areEqual);\r\n","// @flow\r\nimport { createSelector } from \"reselect\";\r\nimport type { State } from \"./types\";\r\n\r\nexport const getArray = (state: State) => state.array;\r\n\r\nexport const getRows = (state: State) => state.rows;\r\n\r\nexport const getCells = (state: State) => state.cells;\r\n\r\nexport const getColumnsQty = (state: State) => state.params.n;\r\n\r\nexport const getIlluminatedQty = (state: State) => state.params.x;\r\n\r\nexport const getSumColumn = createSelector<State, *, *, *, *>(\r\n  [getRows, getCells],\r\n  (rows, cells) => {\r\n    const cellsIds = Object.keys(rows).map((rowId: string) => rows[rowId]);\r\n    const sumColumn = cellsIds.map((row: $ReadOnlyArray<string>) =>\r\n      row.reduce((acc, id) => (acc += cells[id].amount), 0)\r\n    );\r\n    return sumColumn;\r\n  }\r\n);\r\n\r\nexport const getAverageRow = createSelector<State, *, *, *, *, *>(\r\n  [getRows, getCells, getColumnsQty],\r\n  (rows, cells, columnsQty) => {\r\n    const cellsIds = Object.keys(rows).map((rowId: string) => rows[rowId]);\r\n    const rowsQty = cellsIds.length;\r\n    const averageRow = cellsIds.reduce(\r\n      (acc: Array<number>, row: $ReadOnlyArray<string>) =>\r\n        row.map((id, index) => (acc[index] += cells[id].amount / rowsQty)),\r\n      new Array(columnsQty).fill(0)\r\n    );\r\n    return averageRow;\r\n  }\r\n);\r\n","// @flow\r\nimport React from \"react\";\r\nimport \"./AverageCell.module.css\";\r\n\r\ntype ownProps = {|\r\n  averageCell: number,\r\n|};\r\n\r\nconst AverageCell = ({ averageCell }: ownProps) => (\r\n  <td styleName=\"averageTd\">{averageCell.toFixed(2)}</td>\r\n);\r\nexport default React.memo<ownProps>(AverageCell);\r\n","// @flow\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport * as selectors from \"../../redux/selectors\";\r\nimport AverageCell from \"../AverageCell\";\r\n\r\nconst AverageRow = () => {\r\n  const averageRow = useSelector(selectors.getAverageRow);\r\n  return (\r\n    <tr>\r\n      {averageRow.map((cell, index) => (\r\n        <AverageCell key={index} averageCell={cell} />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default AverageRow;\r\n","// @flow\r\nimport type { CellsState } from \"../redux/types\";\r\nconst getClosestNumbers = (\r\n  cells: CellsState,\r\n  pointId: string,\r\n  illuminatedQty: number\r\n) => {\r\n  const cellsWithoutPoint = { ...cells };\r\n  delete cellsWithoutPoint[pointId];\r\n  const cellsArray: Array<\r\n    $ReadOnly<{ id: string, amount: number }>\r\n  > = Object.keys(cellsWithoutPoint).map(\r\n    (cell: string) => cellsWithoutPoint[cell]\r\n  );\r\n\r\n  if (illuminatedQty < cellsArray.length) {\r\n    const pointCell = cells[pointId];\r\n    cellsArray.sort(\r\n      (a, b) =>\r\n        Math.abs(a.amount - pointCell.amount) -\r\n        Math.abs(b.amount - pointCell.amount)\r\n    );\r\n  }\r\n\r\n  const closestNumbers = cellsArray.slice(0, illuminatedQty);\r\n\r\n  const closestNumbersIds: { [id: string]: boolean } = closestNumbers.reduce(\r\n    (acc, cell) => ({ ...acc, [cell.id]: true }),\r\n    {}\r\n  );\r\n\r\n  return { [pointId]: true, ...closestNumbersIds };\r\n};\r\nexport default getClosestNumbers;\r\n","// @flow\r\nimport React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport ArrayRow from \"../ArrayRow\";\r\nimport AverageRow from \"../AverageRow\";\r\nimport * as selectors from \"../../redux/selectors\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport getClosestNumbers from \"../../services/closestNumbers\";\r\nimport createRandomArray from \"../../services/randomArray\";\r\nimport \"./Array.module.css\";\r\nimport type { Action } from \"../../redux/actions\";\r\nimport type { Dispatch } from \"redux\";\r\nimport type { State } from \"../../redux/types\";\r\n\r\nconst Array = () => {\r\n  const { array, rows, cells } = useSelector<State, State>((state) => state);\r\n  const illuminatedQty = useSelector(selectors.getIlluminatedQty);\r\n  const columnQty = useSelector(selectors.getColumnsQty);\r\n  const sumColumn = useSelector(selectors.getSumColumn);\r\n\r\n  const dispatch = useDispatch<Dispatch<Action>>();\r\n\r\n  const [illuminated, setIlluminated] = useState({});\r\n\r\n  const hoverOnHandler = (e: SyntheticEvent<HTMLTableCellElement>) => {\r\n    const { id } = e.currentTarget;\r\n    const closestNumbers = getClosestNumbers(cells, id, illuminatedQty);\r\n    setIlluminated(closestNumbers);\r\n  };\r\n\r\n  const hoverOffHandler = () => {\r\n    setIlluminated({});\r\n  };\r\n\r\n  const increaseHandler = (e: SyntheticEvent<HTMLTableCellElement>) => {\r\n    const { id } = e.currentTarget;\r\n    dispatch(actions.increase(id));\r\n  };\r\n\r\n  const removeHandler = (e: SyntheticEvent<HTMLButtonElement>) => {\r\n    const { id } = e.currentTarget;\r\n    dispatch(actions.removeRow(id, rows[id]));\r\n  };\r\n\r\n  const addHandler = () => {\r\n    const { array, rows, cells } = createRandomArray(1, columnQty);\r\n    dispatch(actions.addRow(array, rows, cells));\r\n  };\r\n\r\n  return (\r\n    array.length > 0 && (\r\n      <div styleName=\"tableWrapper\">\r\n        <table styleName=\"table\">\r\n          <tbody>\r\n            {array.map((rowId, index) => (\r\n              <ArrayRow\r\n                key={rowId}\r\n                id={rowId}\r\n                row={rows[rowId]}\r\n                cells={cells}\r\n                onHover={hoverOnHandler}\r\n                offHover={hoverOffHandler}\r\n                illuminated={illuminated}\r\n                onIncrease={increaseHandler}\r\n                sumCell={sumColumn[index]}\r\n                onRemove={removeHandler}\r\n              />\r\n            ))}\r\n            <AverageRow />\r\n            <tr>\r\n              <td styleName=\"addCell\" colSpan={columnQty}>\r\n                <button\r\n                  id=\"addButton\"\r\n                  styleName=\"addButton\"\r\n                  onClick={addHandler}\r\n                >\r\n                  +\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Array;\r\n","// @flow\r\nimport React from \"react\";\r\nimport Inputs from \"../Inputs/Inputs\";\r\nimport Array from \"../Array\";\r\nimport \"./App.module.css\";\r\n\r\nconst App = () => (\r\n  <div styleName=\"container\">\r\n    <Inputs />\r\n    <Array />\r\n  </div>\r\n);\r\nexport default App;\r\n","// @flow\r\n\r\nimport { combineReducers } from \"redux\";\r\nimport type { Reducer } from \"redux\";\r\nimport * as types from \"./types\";\r\nimport type {\r\n  ArrayState,\r\n  RowsState,\r\n  CellsState,\r\n  ParamsState,\r\n  State,\r\n} from \"./types\";\r\nimport type { Action } from \"./actions\";\r\n\r\nconst arrayReducer = (state: ArrayState = [], action: Action): ArrayState => {\r\n  switch (action.type) {\r\n    case types.ADD_ROW:\r\n      return [...state, ...action.payload.array];\r\n    case types.REMOVE_ROW:\r\n      return state.filter((rowId) => rowId !== action.payload.id);\r\n    case types.SAVE_ARRAY:\r\n      return action.payload.array;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst rowsReducer = (state: RowsState = {}, action: Action): RowsState => {\r\n  switch (action.type) {\r\n    case types.ADD_ROW:\r\n      return { ...state, ...action.payload.row };\r\n    case types.REMOVE_ROW:\r\n      const { [action.payload.id]: deleted, ...withoutDeleted } = state;\r\n      return withoutDeleted;\r\n    case types.SAVE_ROWS:\r\n      return action.payload.rows;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst cellsReducer = (state: CellsState = {}, action: Action): CellsState => {\r\n  switch (action.type) {\r\n    case types.ADD_ROW:\r\n      return { ...state, ...action.payload.cells };\r\n    case types.REMOVE_ROW:\r\n      const { cellsIds } = action.payload;\r\n      const withoutDeleted = Object.keys(state).reduce(\r\n        (acc: CellsState, cellId: string) =>\r\n          cellsIds.includes(cellId) ? acc : { ...acc, [cellId]: state[cellId] },\r\n        {}\r\n      );\r\n      return withoutDeleted;\r\n    case types.SAVE_CELLS:\r\n      return action.payload.cells;\r\n    case types.INCREASE:\r\n      return {\r\n        ...state,\r\n        [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          amount: state[action.payload.id].amount + 1,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst paramsReducer = (\r\n  state: ParamsState = {},\r\n  action: Action\r\n): ParamsState => {\r\n  switch (action.type) {\r\n    case types.SAVE_PARAMS:\r\n      return action.payload.params;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst reducer: Reducer<State, Action> = combineReducers({\r\n  array: arrayReducer,\r\n  rows: rowsReducer,\r\n  cells: cellsReducer,\r\n  params: paramsReducer,\r\n});\r\nexport default reducer;\r\n","// @flow\r\nimport { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport type { State } from \"./types\";\r\nimport type { Dispatch } from \"redux\";\r\nimport type { Action } from \"./actions\";\r\n\r\nconst defaultState = {\r\n  array: [],\r\n  rows: {},\r\n  cells: {},\r\n  params: {},\r\n};\r\n\r\nexport default function configureStore(initialState = defaultState) {\r\n  return createStore<State, Action, Dispatch<Action>>(reducer, initialState);\r\n}\r\n","// @flow\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./redux/store\";\r\n\r\nconst root = document.getElementById(\"root\");\r\n\r\nconst store = configureStore(window.__REDUX_STATE__);\r\n\r\nif (root) {\r\n  ReactDOM.hydrate(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    root\r\n  );\r\n}\r\n"],"sourceRoot":""}