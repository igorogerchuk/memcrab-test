{"version":3,"sources":["components/AvarageRow/AvarageRow.module.css","components/Array/Array.module.css","redux/types.js","services/randomArray.js","components/Inputs.jsx","redux/actions.js","redux/selectors.js","components/ArrayLine.jsx","services/avarageRow.js","components/AvarageRow/AvarageRow.jsx","components/Array/Array.jsx","components/AddLineButton.jsx","components/App.jsx","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","types","REMOVE_LINE","ADD_LINE","SAVE_ARRAY","INCREASE","SAVE_PARAMS","uuidv4","require","createRandomArray","lines","columns","array","i","id","cells","j","amount","Math","floor","random","Inputs","state","m","n","x","inputHandler","e","target","value","setState","submitHandler","preventDefault","onSaveArray","props","alert","this","onSubmit","type","name","onChange","placeholder","Component","connect","dispatch","payload","actions","getArray","TdSum","styled","td","Td","ArrayLine","increaseHandler","onIncrease","line","onRemove","map","element","key","onClick","reduce","sum","ownProps","getAvarageRow","avarageRow","columnQty","length","columnTotal","push","toFixed","AvarageRow","className","styles","avarage","selectors","Array","matrix","AddLineButton","addHandler","onAdd","newLine","App","action","el","reducer","undefined","filter","l","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a5da28c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avarage\":\"AvarageRow_avarage__2TjEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"Array_matrix__1r8Hw\"};","const types = {\r\n  REMOVE_LINE: \"REMOVE_LINE\",\r\n  ADD_LINE: \"ADD_LINE\",\r\n  SAVE_ARRAY: \"SAVE_ARRAY\",\r\n  INCREASE: \"INCREASE\",\r\n  SAVE_PARAMS: \"SAVE_PARAMS\"\r\n};\r\n\r\nexport default types;\r\n","const uuidv4 = require(\"uuid/v4\");\r\n\r\nconst createRandomArray = (lines, columns) => {\r\n  const array = [];\r\n  for (let i = 0; i < lines; i++) {\r\n    array[i] = { id: uuidv4(), cells: [] };\r\n    for (let j = 0; j < columns; j++) {\r\n      array[i].cells[j] = {\r\n        id: \"number\" + uuidv4(),\r\n        amount: Math.floor(Math.random() * 1000)\r\n      };\r\n    }\r\n  }\r\n  return array;\r\n};\r\n\r\nexport default createRandomArray;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport createRandomArray from \"../services/randomArray\";\r\n\r\nclass Inputs extends Component {\r\n  state = { m: \"\", n: \"\", x: \"\" };\r\n\r\n  inputHandler = e => {\r\n    const { id, value } = e.target;\r\n    switch (id) {\r\n      case \"m\":\r\n        this.setState(state => ({ ...state, m: value }));\r\n        break;\r\n      case \"n\":\r\n        this.setState(state => ({ ...state, n: value }));\r\n        break;\r\n      case \"x\":\r\n        this.setState(state => ({ ...state, x: value }));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  submitHandler = e => {\r\n    e.preventDefault();\r\n    const { m, n, x } = this.state;\r\n    const { onSaveArray } = this.props; //, onSaveParams\r\n    if (m <= 0 || n <= 0 || x < 0) {\r\n      alert(\"array parameters must be more then 0\");\r\n      return;\r\n    }\r\n    onSaveArray(createRandomArray(m, n));\r\n    // onSaveParams({ n, x });\r\n\r\n    this.setState({ m: \"\", n: \"\", x: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { m, n, x } = this.state;\r\n    return (\r\n      <div>\r\n        <p>Enter table parameters</p>\r\n        <form onSubmit={this.submitHandler}>\r\n          <label>\r\n            Lines quantity:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              name=\"lines\"\r\n              id=\"m\"\r\n              onChange={this.inputHandler}\r\n              value={m}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Columns quantity:\r\n            <input\r\n              type=\"number\"\r\n              name=\"columns\"\r\n              id=\"n\"\r\n              onChange={this.inputHandler}\r\n              value={n}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Illuminated cells quantity:\r\n            <input\r\n              type=\"number\"\r\n              name=\"illuminate\"\r\n              id=\"x\"\r\n              onChange={this.inputHandler}\r\n              value={x}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <input type=\"submit\" value=\"Generate\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSaveArray: array => dispatch(actions.saveArray(array))\r\n    // onSaveParams: params => dispatch(actions.saveParams(params))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Inputs);\r\n","import types from \"./types\";\r\n\r\nexport const removeLine = id => {\r\n  return {\r\n    type: types.REMOVE_LINE,\r\n    payload: { id }\r\n  };\r\n};\r\n\r\nexport const addLine = newLine => {\r\n  return {\r\n    type: types.ADD_LINE,\r\n    payload: { newLine }\r\n  };\r\n};\r\n\r\nexport const saveArray = array => {\r\n  return {\r\n    type: types.SAVE_ARRAY,\r\n    payload: { array }\r\n  };\r\n};\r\n\r\nexport const increase = id => {\r\n  return {\r\n    type: types.INCREASE,\r\n    payload: { id }\r\n  };\r\n};\r\n\r\n// export const saveParams = params => {\r\n//   return {\r\n//     type: types.SAVE_PARAMS,\r\n//     payload: { params }\r\n//   };\r\n// };\r\n","export const getArray = state => state.array;\r\n\r\n// export const getColumnsQty = state => state.params.n;\r\n\r\n// export const getNumbersQty = state => state.params.x;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport styled from \"styled-components\";\r\nimport * as selectors from \"../redux/selectors\";\r\n\r\nconst TdSum = styled.td`\r\n  background-color: cadetblue;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  cursor: pointer;\r\n`;\r\n\r\n//background: ${props => props.background};\r\n\r\nclass ArrayLine extends Component {\r\n  // state = { hover: false, sum: 0 };\r\n\r\n  increaseHandler = e => {\r\n    // const { id } = e.target;\r\n    // if (id.slice(0, 6) !== \"number\") {\r\n    //   return;\r\n    // }\r\n    const { onIncrease } = this.props;\r\n    onIncrease(e.target.id);\r\n  };\r\n\r\n  // hoverHandler = e => {\r\n  // const value = Number(e.target.innerText);\r\n  // this.setState(state => {\r\n  //   return {\r\n  //     hover: !state.hover,\r\n  //     sum: value\r\n  //   };\r\n  // });\r\n  // };\r\n\r\n  render() {\r\n    const { line, onRemove } = this.props; // closestNumbers,\r\n    // const { hover, sum } = this.state;\r\n\r\n    return (\r\n      <tr>\r\n        {line.map(element => {\r\n          // let bg = \"white\";\r\n          // const percents = (element.amount / sum) * 100;\r\n          // if (closestNumbers.includes(element)) {\r\n          //   bg = \"green\";\r\n          // }\r\n          // if (hover) {\r\n          //   bg = `linear-gradient(to top, #fff200, #1e9600 ${percents}%, transparent ${percents}%)`;\r\n          // }\r\n          return (\r\n            <Td\r\n              key={element.id}\r\n              id={element.id}\r\n              onClick={this.increaseHandler}\r\n              // background={bg}\r\n            >\r\n              {/* {hover ? percents.toFixed(1) + \"%\" : element.amount} */}\r\n              element.amount\r\n            </Td>\r\n          );\r\n        })}\r\n        <TdSum\r\n        // onMouseEnter={this.hoverHandler}\r\n        // onMouseLeave={this.hoverHandler}\r\n        >\r\n          {line.reduce((sum, element) => (sum += element.amount), 0)}\r\n        </TdSum>\r\n        <td>\r\n          <button onClick={onRemove}>Remove</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     array: selectors.getArray(state)\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onRemove: () => dispatch(actions.removeLine(ownProps.id)),\r\n    onIncrease: id => dispatch(actions.increase(id))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ArrayLine);\r\n","const uuidv4 = require(\"uuid/v4\");\r\n\r\nconst getAvarageRow = array => {\r\n  const avarageRow = [];\r\n  const columnQty = array[0].cells.length;\r\n  for (let j = 0; j < columnQty; j++) {\r\n    let columnTotal = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n      columnTotal += array[i].cells[j].amount;\r\n    }\r\n    avarageRow.push({\r\n      id: uuidv4(),\r\n      amount: (columnTotal / columnQty).toFixed(2)\r\n    });\r\n  }\r\n  return avarageRow;\r\n};\r\n\r\nexport default getAvarageRow;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport getAvarageRow from \"../../services/avarageRow\";\r\nimport styles from \"./AvarageRow.module.css\";\r\nimport * as selectors from \"../../redux/selectors\";\r\n\r\nclass AvarageRow extends Component {\r\n  render() {\r\n    const { array } = this.props;\r\n    return (\r\n      <tr className={styles.avarage}>\r\n        {getAvarageRow(array).map(element => {\r\n          return (\r\n            <td key={element.id} id={element.id}>\r\n              {element.amount}\r\n            </td>\r\n          );\r\n        })}\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { array: selectors.getArray(state) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AvarageRow);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ArrayLine from \"../ArrayLine\";\r\nimport AvarageRow from \"../AvarageRow\";\r\nimport styles from \"./Array.module.css\";\r\nimport * as selectors from \"../../redux/selectors\";\r\n// import getClosestNumbers from \"../../services/closestNumbers\";\r\n\r\nclass Array extends Component {\r\n  // state = { hover: false, closestNumbers: [] };\r\n\r\n  // illuminateHandler = e => {\r\n  // const { id } = e.target;\r\n  // if (id.slice(0, 6) !== \"number\") {\r\n  //   return;\r\n  // }\r\n  // const { array, numberQty } = this.props;\r\n  // this.setState(state => {\r\n  //   return {\r\n  //     hover: !state.hover,\r\n  //     closestNumbers: !state.hover\r\n  //       ? getClosestNumbers(array, id, numberQty)\r\n  //       : []\r\n  //   };\r\n  // });\r\n  // };\r\n\r\n  render() {\r\n    const { array } = this.props;\r\n    // const { closestNumbers } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <table\r\n          className={styles.matrix}\r\n          // onMouseOver={this.illuminateHandler}\r\n          // onMouseOut={this.illuminateHandler}\r\n        >\r\n          <tbody>\r\n            {array.map(line => (\r\n              <ArrayLine\r\n                key={line.id}\r\n                id={line.id}\r\n                line={line.cells}\r\n                // closestNumbers={closestNumbers}\r\n              />\r\n            ))}\r\n            <AvarageRow />\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    array: selectors.getArray(state)\r\n    // numberQty: selectors.getNumbersQty(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Array);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport * as selectors from \"../redux/selectors\";\r\nimport createRandomArray from \"../services/randomArray\";\r\n\r\nclass AddLineButton extends Component {\r\n  addHandler = () => {\r\n    const lineLength = 5;\r\n    const { onAdd } = this.props; //lineLength,\r\n    onAdd(createRandomArray(1, lineLength));\r\n  };\r\n\r\n  render() {\r\n    return <button onClick={this.addHandler}>Add Line</button>;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAdd: newLine => dispatch(actions.addLine(newLine))\r\n  };\r\n};\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     lineLength: selectors.getColumnsQty(state)\r\n//   };\r\n// };\r\n\r\nexport default connect(null, mapDispatchToProps)(AddLineButton);\r\n","import React, { Component } from \"react\";\nimport Inputs from \"./Inputs\";\nimport Array from \"./Array\";\nimport AddLineButton from \"./AddLineButton\";\nimport { connect } from \"react-redux\";\nimport * as selectors from \"../redux/selectors\";\n\nclass App extends Component {\n  render() {\n    const { array } = this.props;\n    return (\n      <>\n        <Inputs />\n        {array.length > 0 && <Array />}\n        {array.length > 0 && <AddLineButton />}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { array: selectors.getArray(state) };\n};\n\nexport default connect(mapStateToProps)(App);\n","import types from \"./types\";\r\n// import { combineReducers } from \"redux\";\r\n\r\nconst element = (state, { type, payload }) => {\r\n  switch (type) {\r\n    case types.INCREASE:\r\n      return state.id === payload.id\r\n        ? { ...state, amount: (state.amount += 1) }\r\n        : state;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst line = (state, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_LINE:\r\n      return action.payload.newLine;\r\n    case types.REMOVE_LINE:\r\n      return state.id !== action.payload.id;\r\n    case types.INCREASE:\r\n      return state.map(el => element(el, action));\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case types.ADD_LINE:\r\n      return [...state, ...line(undefined, action)];\r\n    case types.REMOVE_LINE:\r\n      return state.filter(l => line(l, action));\r\n    case types.SAVE_ARRAY:\r\n      return action.payload.array;\r\n    case types.INCREASE:\r\n      return state.map(l => {\r\n        return { ...l, cells: line(l.cells, action) };\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// const paramsReducer = (state = {}, action) => {\r\n//   switch (action.type) {\r\n//     case types.SAVE_PARAMS:\r\n//       return action.payload.params;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const reducer = combineReducers({\r\n//   array: arrayReducer,\r\n//   params: paramsReducer\r\n// });\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}