{"version":3,"sources":["components/AvarageRow/AvarageRow.module.css","components/Array/Array.module.css","redux/types.js","services/randomArray.js","components/Inputs.jsx","redux/actions.js","redux/selectors.js","components/ArrayLine.jsx","services/avarageRow.js","components/AvarageRow/AvarageRow.jsx","components/Array/Array.jsx","components/AddLineButton.jsx","components/App.jsx","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","types","REMOVE_LINE","ADD_LINE","SAVE_ARRAY","INCREASE","uuidv4","require","createRandomArray","lines","columns","array","i","j","id","amount","Math","floor","random","Inputs","state","m","n","x","inputHandler","e","target","value","setState","submitHandler","preventDefault","onSave","props","alert","this","onSubmit","type","name","onChange","placeholder","Component","connect","dispatch","payload","actions","getArray","getColumnsQty","length","TdSum","styled","td","Td","ArrayLine","increaseHandler","onIncrease","line","onRemove","map","element","onClick","key","reduce","sum","ownProps","getAvarageRow","avarageRow","columnQty","columnTotal","push","toFixed","AvarageRow","className","styles","avarage","selectors","Array","matrix","AddLineButton","addHandler","lineLength","onAdd","newLine","App","reducer","concat","filter","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ef5fd5a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avarage\":\"AvarageRow_avarage__2TjEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"Array_matrix__1r8Hw\"};","const types = {\r\n  REMOVE_LINE: \"REMOVE_LINE\",\r\n  ADD_LINE: \"ADD_LINE\",\r\n  SAVE_ARRAY: \"SAVE_ARRAY\",\r\n  INCREASE: \"INCREASE\"\r\n};\r\n\r\nexport default types;\r\n","const uuidv4 = require(\"uuid/v4\");\r\n\r\nconst createRandomArray = (lines, columns) => {\r\n  const array = [];\r\n  for (let i = 0; i < lines; i++) {\r\n    array[i] = [];\r\n    for (let j = 0; j < columns; j++) {\r\n      array[i][j] = {\r\n        id: uuidv4(),\r\n        amount: Math.floor(Math.random() * 1000)\r\n      };\r\n    }\r\n  }\r\n  return array;\r\n};\r\n\r\nexport default createRandomArray;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport createRandomArray from \"../services/randomArray\";\r\n\r\nclass Inputs extends Component {\r\n  state = { m: \"\", n: \"\", x: \"\" };\r\n\r\n  inputHandler = e => {\r\n    const { id, value } = e.target;\r\n    switch (id) {\r\n      case \"m\":\r\n        this.setState(state => ({ ...state, m: value }));\r\n        break;\r\n      case \"n\":\r\n        this.setState(state => ({ ...state, n: value }));\r\n        break;\r\n      case \"x\":\r\n        this.setState(state => ({ ...state, x: value }));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  submitHandler = e => {\r\n    e.preventDefault();\r\n    const { m, n, x } = this.state;\r\n    const { onSave } = this.props;\r\n    if (m <= 0 || n <= 0 || x < 0) {\r\n      alert(\"array parameters must be more then 0\");\r\n      return;\r\n    }\r\n    onSave(createRandomArray(m, n));\r\n\r\n    this.setState({ m: \"\", n: \"\", x: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { m, n, x } = this.state;\r\n    return (\r\n      <div>\r\n        <p>Enter table parameters</p>\r\n        <form onSubmit={this.submitHandler}>\r\n          <label>\r\n            Lines quantity:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              name=\"lines\"\r\n              id=\"m\"\r\n              onChange={this.inputHandler}\r\n              value={m}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Columns quantity:\r\n            <input\r\n              type=\"number\"\r\n              name=\"columns\"\r\n              id=\"n\"\r\n              onChange={this.inputHandler}\r\n              value={n}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Illuminated cells quantity:\r\n            <input\r\n              type=\"number\"\r\n              name=\"illuminate\"\r\n              id=\"x\"\r\n              onChange={this.inputHandler}\r\n              value={x}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <input type=\"submit\" value=\"Generate\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSave: array => dispatch(actions.saveArray(array))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Inputs);\r\n","import types from \"./types\";\r\n\r\nexport const removeLine = line => {\r\n  return {\r\n    type: types.REMOVE_LINE,\r\n    payload: { line }\r\n  };\r\n};\r\n\r\nexport const addLine = newLine => {\r\n  return {\r\n    type: types.ADD_LINE,\r\n    payload: { newLine }\r\n  };\r\n};\r\n\r\nexport const saveArray = array => {\r\n  return {\r\n    type: types.SAVE_ARRAY,\r\n    payload: { array }\r\n  };\r\n};\r\n\r\nexport const increase = id => {\r\n  return {\r\n    type: types.INCREASE,\r\n    payload: { id }\r\n  };\r\n};\r\n","export const getArray = state => state.array;\r\n\r\nexport const getColumnsQty = state => getArray(state)[0].length;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TdSum = styled.td`\r\n  background-color: cadetblue;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: lightgrey;\r\n  }\r\n`;\r\n\r\nclass ArrayLine extends Component {\r\n  increaseHandler = e => {\r\n    const { onIncrease } = this.props;\r\n    onIncrease(e.target.id);\r\n  };\r\n  render() {\r\n    const { line, onRemove } = this.props;\r\n    return (\r\n      <tr>\r\n        {line.map(element => (\r\n          <Td onClick={this.increaseHandler} key={element.id} id={element.id}>\r\n            {element.amount}\r\n          </Td>\r\n        ))}\r\n        <TdSum>\r\n          {line.reduce((sum, element) => (sum += element.amount), 0)}\r\n        </TdSum>\r\n        <td>\r\n          <button onClick={onRemove}>Remove</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onRemove: () => dispatch(actions.removeLine(ownProps.line)),\r\n    onIncrease: id => dispatch(actions.increase(id))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ArrayLine);\r\n","const getAvarageRow = array => {\r\n  const avarageRow = [];\r\n  const columnQty = array[0].length;\r\n  for (let j = 0; j < columnQty; j++) {\r\n    let columnTotal = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n      columnTotal += array[i][j].amount;\r\n    }\r\n    avarageRow.push((columnTotal / columnQty).toFixed(2));\r\n  }\r\n  return avarageRow;\r\n};\r\n\r\nexport default getAvarageRow;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as selectors from \"../../redux/selectors\";\r\nimport getAvarageRow from \"../../services/avarageRow\";\r\nimport styles from \"./AvarageRow.module.css\";\r\n\r\nconst uuidv4 = require(\"uuid/v4\");\r\n\r\nclass AvarageRow extends Component {\r\n  render() {\r\n    const { array } = this.props;\r\n    return (\r\n      <tr className={styles.avarage}>\r\n        {getAvarageRow(array).map(element => {\r\n          return <td key={uuidv4()}>{element}</td>;\r\n        })}\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { array: selectors.getArray(state) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AvarageRow);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as selectors from \"../../redux/selectors\";\r\nimport ArrayLine from \"../ArrayLine\";\r\nimport AvarageRow from \"../AvarageRow\";\r\nimport styles from \"./Array.module.css\";\r\n\r\nconst uuidv4 = require(\"uuid/v4\");\r\n\r\nclass Array extends Component {\r\n  render() {\r\n    const { array } = this.props;\r\n    return (\r\n      <div>\r\n        <table className={styles.matrix}>\r\n          <tbody>\r\n            {array.map(line => {\r\n              let id = uuidv4();\r\n              return <ArrayLine key={id} id={id} line={line} />;\r\n            })}\r\n            <AvarageRow />\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { array: selectors.getArray(state) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Array);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport * as selectors from \"../redux/selectors\";\r\nimport createRandomArray from \"../services/randomArray\";\r\n\r\nclass AddLineButton extends Component {\r\n  addHandler = () => {\r\n    const { lineLength, onAdd } = this.props;\r\n    onAdd(createRandomArray(1, lineLength));\r\n  };\r\n\r\n  render() {\r\n    return <button onClick={this.addHandler}>Add Line</button>;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAdd: newLine => dispatch(actions.addLine(newLine))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    lineLength: selectors.getColumnsQty(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddLineButton);\r\n","import React, { Component } from \"react\";\nimport Inputs from \"./Inputs\";\nimport Array from \"./Array\";\nimport AddLineButton from \"./AddLineButton\";\nimport { connect } from \"react-redux\";\nimport * as selectors from \"../redux/selectors\";\n\nclass App extends Component {\n  render() {\n    const { array } = this.props;\n    return (\n      <>\n        <Inputs />\n        {array.length > 0 && <Array />}\n        {array.length > 0 && <AddLineButton />}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    array: selectors.getArray(state)\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import types from \"./types\";\r\n\r\nconst reducer = (state = { array: [] }, { type, payload }) => {\r\n  const { array } = state;\r\n  switch (type) {\r\n    case types.ADD_LINE:\r\n      return {\r\n        array: array.concat(payload.newLine)\r\n      };\r\n    case types.REMOVE_LINE:\r\n      return {\r\n        array: array.filter(line => line !== payload.line)\r\n      };\r\n    case types.SAVE_ARRAY:\r\n      return { array: payload.array };\r\n    case types.INCREASE:\r\n      return {\r\n        array: array.map(line =>\r\n          line.map(element => {\r\n            if (element.id === payload.id) {\r\n              element.amount++;\r\n            }\r\n            return element;\r\n          })\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}