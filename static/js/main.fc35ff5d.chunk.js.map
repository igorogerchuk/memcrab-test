{"version":3,"sources":["components/Inputs/Inputs.module.css","components/Array/Array.module.css","components/ArrayCell/ArrayCell.module.css","components/SumCell/SumCell.module.css","components/AvarageRow/AvarageRow.module.css","components/AddRowButton/AddRowButton.module.css","components/App/App.module.css","components/ArrayRow/ArrayRow.module.css","redux/types.js","services/randomArray.js","components/Inputs/Inputs.jsx","redux/actions.js","redux/selectors.js","components/ArrayCell/ArrayCell.jsx","components/ArrayRow/ArrayRow.jsx","components/SumCell/SumCell.jsx","components/AvarageRow/AvarageRow.jsx","components/AddRowButton/AddRowButton.jsx","services/closestNumbers.js","components/Array/Array.jsx","components/App/App.jsx","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","types","SAVE_PARAMS","SAVE_ARRAY","SAVE_ROWS","SAVE_CELLS","REMOVE_ROW","ADD_ROW","INCREASE","ILLUMINATE","uuidv4","require","createRandomArray","rowsQty","columnsQty","array","rows","cells","i","rowId","j","cellId","id","amount","randomThreeDigitNumber","Math","floor","random","Inputs","state","m","n","x","inputHandler","e","target","value","setState","submitHandler","preventDefault","props","onSaveParams","onSaveArray","onSaveRows","onSaveCells","alert","this","className","styles","formWrapper","formTitle","form","onSubmit","inputWrapper","htmlFor","label","input","type","name","onChange","placeholder","submitButton","Component","connect","dispatch","params","payload","actions","getArray","getIlluminatedQty","Number","getRows","getCells","getSum","getRow","reduce","sum","element","getAvarageRow","createSelector","avarageRow","length","columnTotal","push","toFixed","React","memo","cell","onHover","offHover","style","background","illuminated","simpleTd","onMouseEnter","onMouseLeave","nextProps","selectors","sumCell","row","map","key","averageRow","avarageTd","AddRowButton","addHandler","onAdd","button","onClick","newRow","getClosestNumbers","pointId","illuminatedQty","cellsWithoutPoint","cellsArray","Object","values","pointCell","sort","a","b","abs","closestNumbersIds","slice","acc","useState","setIlluminated","hoverOnHandler","closestNumbers","hoverOffHandler","tableWrapper","table","App","container","reducer","combineReducers","action","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc35ff5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"Inputs_formWrapper__3qvIq\",\"form\":\"Inputs_form__2CPZL\",\"formTitle\":\"Inputs_formTitle__8nqar\",\"inputWrapper\":\"Inputs_inputWrapper__1ECfZ\",\"label\":\"Inputs_label__2t_1J\",\"input\":\"Inputs_input__u-M3Q\",\"submitButton\":\"Inputs_submitButton__BGAA0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableWrapper\":\"Array_tableWrapper__3r1cA\",\"table\":\"Array_table__1EVmf\",\"addCell\":\"Array_addCell__3PXuk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simpleTd\":\"ArrayCell_simpleTd__3ouJW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sumCell\":\"SumCell_sumCell__1CXIY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avarageTd\":\"AvarageRow_avarageTd__ZvmOI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"AddRowButton_button__3egkv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1wjkN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"removeButton\":\"ArrayRow_removeButton__1w377 AddRowButton_button__3egkv\",\"removeButtonTd\":\"ArrayRow_removeButtonTd__1yrTV Array_addCell__3PXuk\"};","const types = {\r\n  SAVE_PARAMS: \"SAVE_PARAMS\",\r\n  SAVE_ARRAY: \"SAVE_ARRAY\",\r\n  SAVE_ROWS: \"SAVE_ROWS\",\r\n  SAVE_CELLS: \"SAVE_CELLS\",\r\n\r\n  REMOVE_ROW: \"REMOVE_ROW\",\r\n  ADD_ROW: \"ADD_ROW\",\r\n\r\n  INCREASE: \"INCREASE\",\r\n  ILLUMINATE: \"ILLUMINATE\"\r\n};\r\n\r\nexport default types;\r\n","const uuidv4 = require(\"uuid/v4\");\r\n\r\nconst createRandomArray = (rowsQty, columnsQty) => {\r\n  const array = [];\r\n  const rows = {};\r\n  const cells = {};\r\n\r\n  for (let i = 0; i < rowsQty; i++) {\r\n    let rowId = uuidv4();\r\n    array[i] = rowId;\r\n    rows[rowId] = [];\r\n    for (let j = 0; j < columnsQty; j++) {\r\n      let cellId = uuidv4();\r\n      rows[rowId][j] = cellId;\r\n      cells[cellId] = { id: cellId, amount: randomThreeDigitNumber() };\r\n    }\r\n  }\r\n\r\n  return { array, rows, cells };\r\n};\r\n\r\nexport default createRandomArray;\r\n\r\nconst randomThreeDigitNumber = () => Math.floor(Math.random() * 1000);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport createRandomArray from \"../../services/randomArray\";\r\nimport styles from \"./Inputs.module.css\";\r\n\r\nclass Inputs extends Component {\r\n  state = { m: \"\", n: \"\", x: \"\" };\r\n\r\n  inputHandler = e => {\r\n    const { id, value } = e.target;\r\n    this.setState(state => ({ ...state, [id]: value }));\r\n  };\r\n\r\n  submitHandler = e => {\r\n    e.preventDefault();\r\n    const { m, n, x } = this.state;\r\n    const { onSaveParams, onSaveArray, onSaveRows, onSaveCells } = this.props;\r\n    if (m <= 0 || n <= 0 || x < 0) {\r\n      alert(\"array parameters must be more then 0\");\r\n      return;\r\n    }\r\n    onSaveParams({ n, x });\r\n    const { array, rows, cells } = createRandomArray(m, n);\r\n    onSaveArray(array);\r\n    onSaveRows(rows);\r\n    onSaveCells(cells);\r\n\r\n    this.setState({ m: \"\", n: \"\", x: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { m, n, x } = this.state;\r\n    return (\r\n      <div className={styles.formWrapper}>\r\n        <h1 className={styles.formTitle}>Enter table parameters</h1>\r\n        <form className={styles.form} onSubmit={this.submitHandler}>\r\n          <div className={styles.inputWrapper}>\r\n            <label htmlFor=\"m\" className={styles.label}>\r\n              Rows quantity:\r\n            </label>\r\n            <input\r\n              className={styles.input}\r\n              type=\"number\"\r\n              name=\"rows\"\r\n              id=\"m\"\r\n              onChange={this.inputHandler}\r\n              value={m}\r\n              placeholder=\"0\"\r\n            />\r\n          </div>\r\n          <div className={styles.inputWrapper}>\r\n            <label htmlFor=\"n\" className={styles.label}>\r\n              Columns quantity:\r\n            </label>\r\n            <input\r\n              className={styles.input}\r\n              type=\"number\"\r\n              name=\"columns\"\r\n              id=\"n\"\r\n              onChange={this.inputHandler}\r\n              value={n}\r\n              placeholder=\"0\"\r\n            />\r\n          </div>\r\n          <div className={styles.inputWrapper}>\r\n            <label htmlFor=\"m\" className={styles.label}>\r\n              Illuminated cells quantity:\r\n            </label>\r\n            <input\r\n              className={styles.input}\r\n              type=\"number\"\r\n              name=\"illuminate\"\r\n              id=\"x\"\r\n              onChange={this.inputHandler}\r\n              value={x}\r\n              placeholder=\"0\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              className={styles.submitButton}\r\n              type=\"submit\"\r\n              value=\"Generate\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSaveParams: params => dispatch(actions.saveParams(params)),\r\n    onSaveArray: array => dispatch(actions.saveArray(array)),\r\n    onSaveRows: rows => dispatch(actions.saveRows(rows)),\r\n    onSaveCells: cells => dispatch(actions.saveCells(cells))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Inputs);\r\n","import types from \"./types\";\r\n\r\nexport const removeRow = id => {\r\n  return {\r\n    type: types.REMOVE_ROW,\r\n    payload: { id }\r\n  };\r\n};\r\n\r\nexport const addRow = newRow => {\r\n  return {\r\n    type: types.ADD_ROW,\r\n    payload: { newRow }\r\n  };\r\n};\r\n\r\nexport const saveArray = array => {\r\n  return {\r\n    type: types.SAVE_ARRAY,\r\n    payload: { array }\r\n  };\r\n};\r\n\r\nexport const saveRows = rows => {\r\n  return {\r\n    type: types.SAVE_ROWS,\r\n    payload: { rows }\r\n  };\r\n};\r\n\r\nexport const saveCells = cells => {\r\n  return {\r\n    type: types.SAVE_CELLS,\r\n    payload: { cells }\r\n  };\r\n};\r\n\r\nexport const increase = (id, rowId) => {\r\n  return {\r\n    type: types.INCREASE,\r\n    payload: { id, rowId }\r\n  };\r\n};\r\n\r\nexport const saveParams = params => {\r\n  return {\r\n    type: types.SAVE_PARAMS,\r\n    payload: { params }\r\n  };\r\n};\r\n\r\n// export const illuminate = illuminated => {\r\n//   return {\r\n//     type: types.ILLUMINATE,\r\n//     payload: { illuminated }\r\n//   };\r\n// };\r\n","import { createSelector } from \"reselect\";\r\n\r\nexport const getArray = state => state.array;\r\n\r\n// export const getColumnsQty = state => Number(state.params.n);\r\n\r\nexport const getIlluminatedQty = state => Number(state.params.x);\r\n\r\n// export const getIlluminated = state => state.illuminated;\r\n\r\nexport const getRow = (state, id) => state.rows[id];\r\n\r\nexport const getRows = state => state.rows;\r\n\r\nexport const getCell = (state, id) => state.cells[id];\r\n\r\nexport const getCells = state => state.cells;\r\n\r\nexport const getSum = (state, id) => {\r\n  return getRow(state, id).cells.reduce(\r\n    (sum, element) => (sum += element.amount),\r\n    0\r\n  );\r\n};\r\n\r\nconst uuidv4 = require(\"uuid/v4\");\r\n\r\nexport const getAvarageRow = createSelector([getArray], array => {\r\n  const avarageRow = [];\r\n  for (let j = 0; j < array[j].length; j++) {\r\n    let columnTotal = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n      columnTotal += array[i].cells[j].amount;\r\n    }\r\n    avarageRow.push({\r\n      id: uuidv4(),\r\n      amount: (columnTotal / array.length).toFixed(2)\r\n    });\r\n  }\r\n  return avarageRow;\r\n});\r\n","import React from \"react\";\r\nimport styles from \"./ArrayCell.module.css\";\r\n\r\nconst areEqual = ({ illuminated, id }, nextProps) => {\r\n  if (nextProps.illuminated[id] !== illuminated[id]) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst ArrayCell = ({ cell, id, onHover, offHover, illuminated }) => {\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   // const { cell, illuminated, sumHover, id } = this.props;\r\n  //   const { illuminated, id } = this.props;\r\n\r\n  //   // if (nextProps.sumHover !== sumHover) {\r\n  //   //   return true;\r\n  //   // }\r\n  //   // if (nextProps.cell.amount !== cell.amount) {\r\n  //   //   return true;\r\n  //   // }\r\n  //   if (nextProps.illuminated[id] !== illuminated[id]) {\r\n  //     return true;\r\n  //   }\r\n\r\n  //   return false;\r\n  // }\r\n\r\n  //sum, sumHover, onIncrease,\r\n\r\n  let style = {\r\n    background:\r\n      \"linear-gradient(110deg,#eee 0%,#e3e3e3 10%,#fff 20%,#fff 25%,#f0f0f0 26%,#fff 28%,#ddd 55%,#eee 100%)\"\r\n  };\r\n\r\n  // const percents = (cell.amount / sum) * 100;\r\n\r\n  if (illuminated[id]) {\r\n    style.background =\r\n      \"linear-gradient(110deg, #f90c04 0%, #ed413b 10%, #fff 20%, #fff 25%, #f0f0f0 26%, #fff 28%, #f53d37 55%, #f90c04 100%)\";\r\n  }\r\n\r\n  // if (sumHover) {\r\n  //   bg.background = `linear-gradient(to top, #fff200, #1e9600 ${percents}%, transparent ${percents}%)`;\r\n  // }\r\n\r\n  return (\r\n    <td\r\n      className={styles.simpleTd}\r\n      // onClick={onIncrease}\r\n      id={id}\r\n      onMouseEnter={onHover}\r\n      onMouseLeave={offHover}\r\n      style={style}\r\n    >\r\n      {/* {sumHover ? percents.toFixed(1) + \"%\" : cell.amount} */}\r\n      {cell.amount}\r\n    </td>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = (state, { id }) => {\r\n//   return {\r\n//     // array: selectors.getArray(state),\r\n//     cell: selectors.getCell(state, id)\r\n//     // sum: selectors.getSum(state, lineId)\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch, { id }) => {\r\n//   return {\r\n//     // onIncrease: () => dispatch(actions.increase(id, lineId)),\r\n//     // onHover: closestNumbers => dispatch(actions.illuminate(closestNumbers))\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ArrayCell);\r\n\r\nexport default React.memo(ArrayCell, areEqual);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport * as selectors from \"../../redux/selectors\";\r\nimport ArrayCell from \"../ArrayCell\";\r\nimport SumCell from \"../SumCell\";\r\nimport styles from \"./ArrayRow.module.css\";\r\n\r\nconst areEqual = ({ illuminated, row }, nextProps) => {\r\n  for (let cellId of row) {\r\n    if (nextProps.illuminated[cellId] !== illuminated[cellId]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\nconst ArrayRow = ({ row, id, onHover, offHover, illuminated, cells }) => {\r\n  // state = { sumHover: false };\r\n\r\n  //const hoverHandler = () => {\r\n  //   this.setState(state => {\r\n  //     return {\r\n  //       sumHover: !state.sumHover\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <tr id={id}>\r\n      {row.map(cellId => (\r\n        <ArrayCell\r\n          // sumHover={sumHover}\r\n          key={cellId}\r\n          id={cellId}\r\n          onHover={onHover}\r\n          offHover={offHover}\r\n          illuminated={illuminated}\r\n          cell={cells[cellId]}\r\n        />\r\n      ))}\r\n      {/* <SumCell onHover={this.hoverHandler} id={id} /> */}\r\n      {/* <td className={styles.removeButtonTd}>\r\n          <button className={styles.removeButton} onClick={onRemove}>\r\n            &times;\r\n          </button>\r\n        </td> */}\r\n    </tr>\r\n  );\r\n  // }\r\n};\r\n\r\n// const mapStateToProps = (state, { id }) => {\r\n//   return {\r\n//     row: selectors.getRow(state, id),\r\n//     cells: selectors.getCells(state)\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch, ownProps) => {\r\n//   return {\r\n//     // onRemove: () => dispatch(actions.removeRow(ownProps.id))\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ArrayRow);\r\n\r\nexport default React.memo(ArrayRow, areEqual);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as selectors from \"../../redux/selectors\";\r\nimport styles from \"./SumCell.module.css\";\r\n\r\nconst SumCell = ({ sum, onHover }) => (\r\n  <td onMouseEnter={onHover} onMouseLeave={onHover} className={styles.sumCell}>\r\n    {sum}\r\n  </td>\r\n);\r\n\r\nconst mapStateToProps = (state, { id }) => {\r\n  return {\r\n    sum: selectors.getSum(state, id)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(React.memo(SumCell));\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styles from \"./AvarageRow.module.css\";\r\nimport * as selectors from \"../../redux/selectors\";\r\n\r\nconst AvarageRow = ({ averageRow }) => (\r\n  <tr>\r\n    {averageRow.map(element => {\r\n      return (\r\n        <td className={styles.avarageTd} key={element.id} id={element.id}>\r\n          {element.amount}\r\n        </td>\r\n      );\r\n    })}\r\n  </tr>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    averageRow: selectors.getAvarageRow(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AvarageRow);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport * as selectors from \"../../redux/selectors\";\r\nimport createRandomArray from \"../../services/randomArray\";\r\nimport styles from \"./AddRowButton.module.css\";\r\n\r\nclass AddRowButton extends Component {\r\n  addHandler = () => {\r\n    const { onAdd } = this.props;\r\n    onAdd(createRandomArray(1));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <button className={styles.button} onClick={this.addHandler}>\r\n        +\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAdd: newRow => dispatch(actions.addRow(newRow))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    // rowLength: selectors.getColumnsQty(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddRowButton);\r\n","const getClosestNumbers = (cells, pointId, illuminatedQty) => {\r\n  const {\r\n    [pointId]: {},\r\n    ...cellsWithoutPoint\r\n  } = cells;\r\n  const cellsArray = Object.values(cellsWithoutPoint);\r\n\r\n  if (illuminatedQty < cellsArray.length) {\r\n    const pointCell = cells[pointId];\r\n    cellsArray.sort(\r\n      (a, b) =>\r\n        Math.abs(a.amount - pointCell.amount) -\r\n        Math.abs(b.amount - pointCell.amount)\r\n    );\r\n  }\r\n\r\n  const closestNumbers = cellsArray.slice(0, illuminatedQty);\r\n\r\n  const closestNumbersIds = closestNumbers.reduce(\r\n    (acc, cell) => ({ ...acc, [cell.id]: true }),\r\n    {}\r\n  );\r\n\r\n  return { [pointId]: true, ...closestNumbersIds };\r\n};\r\n\r\nexport default getClosestNumbers;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ArrayRow from \"../ArrayRow\";\r\nimport AvarageRow from \"../AvarageRow\";\r\nimport AddRowButton from \"../AddRowButton\";\r\nimport styles from \"./Array.module.css\";\r\nimport * as selectors from \"../../redux/selectors\";\r\nimport getClosestNumbers from \"../../services/closestNumbers\";\r\n\r\nconst Array = ({ array, rows, cells, illuminatedQty }) => {\r\n  const [illuminated, setIlluminated] = useState({});\r\n\r\n  const hoverOnHandler = e => {\r\n    const { id } = e.target;\r\n    const closestNumbers = getClosestNumbers(cells, id, illuminatedQty);\r\n    setIlluminated(closestNumbers);\r\n  };\r\n\r\n  const hoverOffHandler = e => {\r\n    setIlluminated({});\r\n  };\r\n\r\n  return (\r\n    array.length > 0 && (\r\n      <div className={styles.tableWrapper}>\r\n        <table className={styles.table}>\r\n          <tbody>\r\n            {array.map(rowId => (\r\n              <ArrayRow\r\n                key={rowId}\r\n                id={rowId}\r\n                row={rows[rowId]}\r\n                cells={cells}\r\n                onHover={hoverOnHandler}\r\n                offHover={hoverOffHandler}\r\n                illuminated={illuminated}\r\n              />\r\n            ))}\r\n            {/* <AvarageRow /> */}\r\n            {/* <tr>\r\n                 <td className={styles.addCell} colSpan={columnQty}>\r\n                  <AddRowButton />\r\n                </td> \r\n              </tr> */}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  array: selectors.getArray(state),\r\n  rows: selectors.getRows(state),\r\n  cells: selectors.getCells(state),\r\n  illuminatedQty: selectors.getIlluminatedQty(state)\r\n  // columnQty: selectors.getColumnsQty(state)\r\n});\r\n\r\nexport default connect(mapStateToProps)(React.memo(Array));\r\n","import React from \"react\";\nimport Inputs from \"../Inputs/Inputs\";\nimport Array from \"../Array\";\nimport styles from \"./App.module.css\";\n\nconst App = () => (\n  <div className={styles.container}>\n    <Inputs />\n    <Array />\n  </div>\n);\n\nexport default App;\n","import types from \"./types\";\r\nimport { combineReducers } from \"redux\";\r\n\r\n// const element = (state, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.INCREASE:\r\n//       return state.id === payload.id\r\n//         ? { ...state, amount: state.amount + 1 }\r\n//         : state;\r\n//     default:\r\n//       break;\r\n//   }\r\n// };\r\n\r\n// const row = (state, action) => {\r\n//   switch (action.type) {\r\n//      case types.ADD_ROW:\r\n//        return action.payload.newRow;\r\n//     case types.REMOVE_ROW:\r\n//       return state.id !== action.payload.id;\r\n//     case types.INCREASE:\r\n//       if (state.id === action.payload.rowId) {\r\n//         return { ...state, cells: state.cells.map(el => element(el, action)) };\r\n//       }\r\n//       return state;\r\n//     default:\r\n//       break;\r\n//   }\r\n// };\r\n\r\nconst arrayReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    // case types.ADD_ROW:\r\n    //   return [...state, ...row(undefined, action)];\r\n    // case types.REMOVE_ROW:\r\n    //   return state.filter(l => row(l, action));\r\n    case types.SAVE_ARRAY:\r\n      return action.payload.array;\r\n    // case types.INCREASE:\r\n    //   return state.map(l => row(l, action));\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst rowsReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    // case types.ADD_ROW:\r\n    //   return [...state, ...row(undefined, action)];\r\n    // case types.REMOVE_ROW:\r\n    //   return state.filter(l => row(l, action));\r\n    case types.SAVE_ROWS:\r\n      return action.payload.rows;\r\n    // case types.INCREASE:\r\n    //   return state.map(l => row(l, action));\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst cellsReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    // case types.ADD_ROW:\r\n    //   return [...state, ...row(undefined, action)];\r\n    // case types.REMOVE_ROW:\r\n    //   return state.filter(l => row(l, action));\r\n    case types.SAVE_CELLS:\r\n      return action.payload.cells;\r\n    // case types.INCREASE:\r\n    //   return state.map(l => row(l, action));\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst paramsReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case types.SAVE_PARAMS:\r\n      return action.payload.params;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// const illuminatedReducer = (state = {}, action) => {\r\n//   switch (action.type) {\r\n//     case types.ILLUMINATE:\r\n//       return action.payload.illuminated;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst reducer = combineReducers({\r\n  array: arrayReducer,\r\n  rows: rowsReducer,\r\n  cells: cellsReducer,\r\n  params: paramsReducer\r\n  // illuminated: illuminatedReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}