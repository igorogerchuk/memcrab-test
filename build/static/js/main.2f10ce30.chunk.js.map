{"version":3,"sources":["components/AvarageRow/AvarageRow.module.css","components/Array/Array.module.css","redux/types.js","services/randomArray.js","components/Inputs.jsx","redux/actions.js","redux/selectors.js","components/ArrayCell.jsx","components/ArrayRow.jsx","services/avarageRow.js","components/AvarageRow/AvarageRow.jsx","services/closestNumbers.js","components/Array/Array.jsx","components/AddLineButton.jsx","components/App.jsx","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","types","REMOVE_LINE","ADD_LINE","SAVE_ARRAY","INCREASE","SAVE_PARAMS","ILLUMINATE","uuidv4","require","createRandomArray","lines","columns","array","i","id","cells","j","amount","Math","floor","random","Inputs","state","m","n","x","inputHandler","e","target","value","setState","submitHandler","preventDefault","props","onSaveParams","onSaveArray","alert","this","onSubmit","type","name","onChange","placeholder","Component","connect","dispatch","payload","actions","params","getArray","getColumnsQty","Number","getNumbersQty","getIlluminated","illuminated","getLine","find","line","getCell","lineId","cell","Td","styled","td","background","ArrayCell","element","sum","sumHover","onIncrease","bg","percents","length","includes","onClick","toFixed","selectors","TdSum","ArrayRow","hoverHandler","innerText","onRemove","map","key","onMouseEnter","onMouseLeave","reduce","ownProps","getAvarageRow","avarageRow","columnQty","columnTotal","push","AvarageRow","className","styles","avarage","getClosestNumbers","numbersQty","inlineArray","acc","sort","a","b","abs","slice","Array","numberQty","onHover","matrix","onMouseOver","closestNumbers","onMouseOut","AddLineButton","addHandler","lineLength","onAdd","newLine","App","action","el","reducer","combineReducers","undefined","filter","l","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f10ce30.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avarage\":\"AvarageRow_avarage__2TjEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"Array_matrix__1r8Hw\"};","const types = {\r\n  REMOVE_LINE: \"REMOVE_LINE\",\r\n  ADD_LINE: \"ADD_LINE\",\r\n  SAVE_ARRAY: \"SAVE_ARRAY\",\r\n  INCREASE: \"INCREASE\",\r\n  SAVE_PARAMS: \"SAVE_PARAMS\",\r\n  ILLUMINATE: \"ILLUMINATE\"\r\n};\r\n\r\nexport default types;\r\n","const uuidv4 = require(\"uuid/v4\");\r\n\r\nconst createRandomArray = (lines, columns) => {\r\n  const array = [];\r\n  for (let i = 0; i < lines; i++) {\r\n    array[i] = { id: uuidv4(), cells: [] };\r\n    for (let j = 0; j < columns; j++) {\r\n      array[i].cells[j] = {\r\n        id: \"number\" + uuidv4(),\r\n        amount: Math.floor(Math.random() * 1000)\r\n      };\r\n    }\r\n  }\r\n  return array;\r\n};\r\n\r\nexport default createRandomArray;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport createRandomArray from \"../services/randomArray\";\r\n\r\nclass Inputs extends Component {\r\n  state = { m: \"\", n: \"\", x: \"\" };\r\n\r\n  inputHandler = e => {\r\n    const { id, value } = e.target;\r\n    switch (id) {\r\n      case \"m\":\r\n        this.setState(state => ({ ...state, m: value }));\r\n        break;\r\n      case \"n\":\r\n        this.setState(state => ({ ...state, n: value }));\r\n        break;\r\n      case \"x\":\r\n        this.setState(state => ({ ...state, x: value }));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  submitHandler = e => {\r\n    e.preventDefault();\r\n    const { m, n, x } = this.state;\r\n    const { onSaveParams, onSaveArray } = this.props;\r\n    if (m <= 0 || n <= 0 || x < 0) {\r\n      alert(\"array parameters must be more then 0\");\r\n      return;\r\n    }\r\n    onSaveArray(createRandomArray(m, n));\r\n    onSaveParams({ n, x });\r\n\r\n    this.setState({ m: \"\", n: \"\", x: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { m, n, x } = this.state;\r\n    return (\r\n      <div>\r\n        <p>Enter table parameters</p>\r\n        <form onSubmit={this.submitHandler}>\r\n          <label>\r\n            Lines quantity:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              name=\"lines\"\r\n              id=\"m\"\r\n              onChange={this.inputHandler}\r\n              value={m}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Columns quantity:\r\n            <input\r\n              type=\"number\"\r\n              name=\"columns\"\r\n              id=\"n\"\r\n              onChange={this.inputHandler}\r\n              value={n}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Illuminated cells quantity:\r\n            <input\r\n              type=\"number\"\r\n              name=\"illuminate\"\r\n              id=\"x\"\r\n              onChange={this.inputHandler}\r\n              value={x}\r\n              placeholder=\"0\"\r\n            />\r\n          </label>\r\n          <input type=\"submit\" value=\"Generate\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSaveArray: array => dispatch(actions.saveArray(array)),\r\n    onSaveParams: params => dispatch(actions.saveParams(params))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Inputs);\r\n","import types from \"./types\";\r\n\r\nexport const removeLine = id => {\r\n  return {\r\n    type: types.REMOVE_LINE,\r\n    payload: { id }\r\n  };\r\n};\r\n\r\nexport const addLine = newLine => {\r\n  return {\r\n    type: types.ADD_LINE,\r\n    payload: { newLine }\r\n  };\r\n};\r\n\r\nexport const saveArray = array => {\r\n  return {\r\n    type: types.SAVE_ARRAY,\r\n    payload: { array }\r\n  };\r\n};\r\n\r\nexport const increase = id => {\r\n  return {\r\n    type: types.INCREASE,\r\n    payload: { id }\r\n  };\r\n};\r\n\r\nexport const saveParams = params => {\r\n  return {\r\n    type: types.SAVE_PARAMS,\r\n    payload: { params }\r\n  };\r\n};\r\n\r\nexport const illuminate = illuminated => {\r\n  return {\r\n    type: types.ILLUMINATE,\r\n    payload: { illuminated }\r\n  };\r\n};\r\n","export const getArray = state => state.array;\r\n\r\nexport const getColumnsQty = state => Number(state.params.n);\r\n\r\nexport const getNumbersQty = state => Number(state.params.x);\r\n\r\nexport const getIlluminated = state => state.illuminated;\r\n\r\nexport const getLine = (state, id) => {\r\n  return getArray(state).find(line => line.id === id);\r\n};\r\n\r\nexport const getCell = (state, id, lineId) => {\r\n  return getLine(state, lineId).cells.find(cell => cell.id === id);\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport * as selectors from \"../redux/selectors\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Td = styled.td`\r\n  background: ${props => props.background};\r\n  cursor: pointer;\r\n`;\r\n\r\nclass ArrayCell extends Component {\r\n  render() {\r\n    const { element, sum, sumHover, onIncrease, id, illuminated } = this.props;\r\n\r\n    let bg = \"white\";\r\n    const percents = (element.amount / sum) * 100;\r\n    if (illuminated.length > 0 && illuminated.includes(element)) {\r\n      bg = \"green\";\r\n    }\r\n    if (sumHover) {\r\n      bg = `linear-gradient(to top, #fff200, #1e9600 ${percents}%, transparent ${percents}%)`;\r\n    }\r\n    return (\r\n      <Td onClick={onIncrease} background={bg} id={id}>\r\n        {sumHover ? percents.toFixed(1) + \"%\" : element.amount}\r\n      </Td>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, { id, lineId }) => {\r\n  return {\r\n    illuminated: selectors.getIlluminated(state),\r\n    element: selectors.getCell(state, id, lineId)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, { id }) => {\r\n  return {\r\n    onIncrease: () => dispatch(actions.increase(id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArrayCell);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport styled from \"styled-components\";\r\nimport * as selectors from \"../redux/selectors\";\r\nimport ArrayCell from \"./ArrayCell\";\r\n\r\nconst TdSum = styled.td`\r\n  background-color: cadetblue;\r\n  cursor: pointer;\r\n`;\r\n\r\nclass ArrayRow extends Component {\r\n  state = { sumHover: false, sum: 0 };\r\n\r\n  hoverHandler = e => {\r\n    const value = Number(e.target.innerText);\r\n    this.setState(state => {\r\n      return {\r\n        sumHover: !state.sumHover,\r\n        sum: value\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { line, onRemove, id } = this.props;\r\n    const { sumHover, sum } = this.state;\r\n\r\n    return (\r\n      <tr id={id}>\r\n        {line.cells.map(element => (\r\n          <ArrayCell\r\n            sumHover={sumHover}\r\n            sum={sum}\r\n            key={element.id}\r\n            id={element.id}\r\n            lineId={id}\r\n          />\r\n        ))}\r\n        <TdSum\r\n          onMouseEnter={this.hoverHandler}\r\n          onMouseLeave={this.hoverHandler}\r\n        >\r\n          {line.cells.reduce((sum, element) => (sum += element.amount), 0)}\r\n        </TdSum>\r\n        <td>\r\n          <button onClick={onRemove}>Remove</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, { id }) => {\r\n  return {\r\n    line: selectors.getLine(state, id)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onRemove: () => dispatch(actions.removeLine(ownProps.id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArrayRow);\r\n","const uuidv4 = require(\"uuid/v4\");\r\n\r\nconst getAvarageRow = array => {\r\n  const avarageRow = [];\r\n  const columnQty = array[0].cells.length;\r\n  for (let j = 0; j < columnQty; j++) {\r\n    let columnTotal = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n      columnTotal += array[i].cells[j].amount;\r\n    }\r\n    avarageRow.push({\r\n      id: uuidv4(),\r\n      amount: (columnTotal / columnQty).toFixed(2)\r\n    });\r\n  }\r\n  return avarageRow;\r\n};\r\n\r\nexport default getAvarageRow;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport getAvarageRow from \"../../services/avarageRow\";\r\nimport styles from \"./AvarageRow.module.css\";\r\nimport * as selectors from \"../../redux/selectors\";\r\n\r\nclass AvarageRow extends Component {\r\n  render() {\r\n    const { array } = this.props;\r\n    return (\r\n      <tr className={styles.avarage}>\r\n        {getAvarageRow(array).map(element => {\r\n          return (\r\n            <td key={element.id} id={element.id}>\r\n              {element.amount}\r\n            </td>\r\n          );\r\n        })}\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { array: selectors.getArray(state) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AvarageRow);\r\n","const getClosestNumbers = (array, value, numbersQty) => {\r\n  let inlineArray = array.reduce((acc, line) => [...acc, ...line.cells], []);\r\n\r\n  if (numbersQty >= inlineArray.length) {\r\n    return inlineArray;\r\n  }\r\n\r\n  inlineArray.sort(\r\n    (a, b) => Math.abs(a.amount - value) - Math.abs(b.amount - value)\r\n  );\r\n\r\n  return inlineArray.slice(0, numbersQty + 1);\r\n};\r\n\r\nexport default getClosestNumbers;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ArrayRow from \"../ArrayRow\";\r\nimport AvarageRow from \"../AvarageRow\";\r\nimport styles from \"./Array.module.css\";\r\nimport * as selectors from \"../../redux/selectors\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport getClosestNumbers from \"../../services/closestNumbers\";\r\n\r\nclass Array extends Component {\r\n  render() {\r\n    const { array, numberQty, onHover } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <table\r\n          className={styles.matrix}\r\n          onMouseOver={e => {\r\n            const { id, innerText } = e.target;\r\n            if (id.slice(0, 6) !== \"number\") {\r\n              return;\r\n            }\r\n            const value = Number(innerText);\r\n            const closestNumbers = getClosestNumbers(array, value, numberQty);\r\n            onHover(closestNumbers);\r\n          }}\r\n          onMouseOut={() => {\r\n            onHover([]);\r\n          }}\r\n        >\r\n          <tbody>\r\n            {array.map(line => (\r\n              <ArrayRow key={line.id} id={line.id} />\r\n            ))}\r\n            <AvarageRow />\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    array: selectors.getArray(state),\r\n    numberQty: selectors.getNumbersQty(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onHover: closestNumbers => dispatch(actions.illuminate(closestNumbers))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Array);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../redux/actions\";\r\nimport * as selectors from \"../redux/selectors\";\r\nimport createRandomArray from \"../services/randomArray\";\r\n\r\nclass AddLineButton extends Component {\r\n  addHandler = () => {\r\n    const { lineLength, onAdd } = this.props;\r\n    onAdd(createRandomArray(1, lineLength));\r\n  };\r\n\r\n  render() {\r\n    return <button onClick={this.addHandler}>Add Line</button>;\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAdd: newLine => dispatch(actions.addLine(newLine))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    lineLength: selectors.getColumnsQty(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddLineButton);\r\n","import React, { Component } from \"react\";\nimport Inputs from \"./Inputs\";\nimport Array from \"./Array\";\nimport AddLineButton from \"./AddLineButton\";\nimport { connect } from \"react-redux\";\nimport * as selectors from \"../redux/selectors\";\n\nclass App extends Component {\n  render() {\n    const { array } = this.props;\n    return (\n      <>\n        <Inputs />\n        {array.length > 0 && <Array />}\n        {array.length > 0 && <AddLineButton />}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { array: selectors.getArray(state) };\n};\n\nexport default connect(mapStateToProps)(App);\n","import types from \"./types\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst element = (state, { type, payload }) => {\r\n  switch (type) {\r\n    case types.INCREASE:\r\n      return state.id === payload.id\r\n        ? { ...state, amount: (state.amount += 1) }\r\n        : state;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst line = (state, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_LINE:\r\n      return action.payload.newLine;\r\n    case types.REMOVE_LINE:\r\n      return state.id !== action.payload.id;\r\n    case types.INCREASE:\r\n      return state.map(el => element(el, action));\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst arrayReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case types.ADD_LINE:\r\n      return [...state, ...line(undefined, action)];\r\n    case types.REMOVE_LINE:\r\n      return state.filter(l => line(l, action));\r\n    case types.SAVE_ARRAY:\r\n      return action.payload.array;\r\n    case types.INCREASE:\r\n      return state.map(l => {\r\n        return { ...l, cells: line(l.cells, action) };\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst paramsReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case types.SAVE_PARAMS:\r\n      return action.payload.params;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst illuminatedReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case types.ILLUMINATE:\r\n      return action.payload.illuminated;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst reducer = combineReducers({\r\n  array: arrayReducer,\r\n  params: paramsReducer,\r\n  illuminated: illuminatedReducer\r\n});\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}